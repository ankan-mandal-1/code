#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 100

int V, E;
int parent[100];
int cost[100][100];

int find(int i) {
	while (parent[i] != i)
		i = parent[i];
	return i;
}

void union1(int i, int j) {
	int a = find(i);
	int b = find(j);
	parent[a] = b;
}

void kruskalMST() {
	int mincost = 0;
	int edge_count = 0;
	while (edge_count < V - 1) {
		int min = INT_MAX, a = -1, b = -1;
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (find(i) != find(j) && cost[i][j] < min) {
					min = cost[i][j];
					a = i;
					b = j;
				}
			}
		}

		union1(a, b);
        printf("Edge %d:(%d %d) cost:%d\n", edge_count++, a, b, min);
		mincost += min;
	}
	printf("\nMinimum cost= %d", mincost);
}

int main() {
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &V, &E);
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cost[i][j] = INT_MAX;
        }
    }

    printf("Enter the edges and their weights (source destination weight):\n");
    for (int j = 0; j < E; j++) {
        int m, n, w;
        scanf("%d %d %d", &m, &n, &w);
        cost[m][n] = w;
        cost[n][m] = w; // Assuming an undirected graph
    }

    for (int i = 0; i < V; i++)
        parent[i] = i;

	kruskalMST();
	return 0;
}
